// #include <bits/allocator.h>
// #pragma GCC optimize("O3,unroll-loops")
// #pragma GCC target("avx2,bmi,bmi2,lzcnt,popcnt")
#include "bits/stdc++.h"
using namespace std;
using ll = long long int;
mt19937_64 RNG(chrono::high_resolution_clock::now().time_since_epoch().count());

const int N = 2e5 + 5;
int a[N];

int main()
{
    ios::sync_with_stdio(false); cin.tie(0);

    int t; cin >> t;
    while (t--) {
        int n; cin >> n;
        for (int i = 0; i < n; ++i) {
            cin >> a[i];
            --a[i];
        }

        ll ans = 0;
        auto calc = [&] (bool sub = false) {
            vector<int> next(n, n), pos(n, n);
            for (int i = n-1; i >= 0; --i) {
                next[i] = pos[a[i]];
                pos[a[i]] = i;
            }

            vector<int> link(n, -1), stk;
            vector<vector<int>> adj(n);
            for (int i = 0; i < n; ++i) {
                while (!stk.empty()) {
                    if (next[stk.back()] >= next[i]) stk.pop_back();
                    else break;
                }
                if (!stk.empty()) {
                    link[i] = stk.back();
                    adj[stk.back()].push_back(i);
                }
                stk.push_back(i);
            }

            vector<int> mark(n);
            vector<ll> val(n);
            for (int i = 0; i < n; ++i) {
                if (mark[i]) continue;

                vector<int> path = {-1};
                val[i] = 1ll * (i + 1) * next[i];
                auto dfs = [&] (const auto &self, int u) -> void {
                    path.push_back(u);
                    mark[u] = 1;
                    int lo = 0, hi = path.size() - 1;
                    while (lo < hi) {
                        int mid = (lo + hi + 1) / 2;
                        if (next[path[mid]] > u) hi = mid - 1;
                        else lo = mid;
                    }

                    ans += val[u] - (lo ? val[path[lo]] : 0);
                    ans -= 1ll*u*(u - path[lo]);

                    for (int v : adj[u]) {
                        val[v] = val[u] + 1ll*(v - u)*next[v];
                        self(self, v);
                    }
                    path.pop_back();
                };
                dfs(dfs, i);
            }

            if (!sub) return;

            int mn = n;
            for (int i = n-1; i >= 0; --i) {
                mn = min(mn, next[i]);
                // ans -= 1 + 2 + 3 + ... + mn - i
                ans -= 1ll * (mn - i) * (mn - i + 1) / 2;
                // add in contribution of all-distinct subarrays
                ans -= mn - i;
            }
        };
        calc();
        reverse(a, a+n);
        calc(true);

        ans *= -1;
        for (int i = 0; i < n; ++i)
            ans += 1ll*(i+1)*(n-i);

        cout << ans << '\n';
    }
}